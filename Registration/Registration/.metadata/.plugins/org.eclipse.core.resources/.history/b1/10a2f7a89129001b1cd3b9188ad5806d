package com.login.service;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import com.login.model.Admin;
import com.login.model.Services;
import com.login.model.User;
import com.login.repository.*;

import net.bytebuddy.utility.RandomString;

@Service
public class RegistrationServices {
	@Autowired
	private JavaMailSender mailSender;
	@Autowired
	private CrudRepo repo;
	@Autowired
	private CrudRepos repos;
	@Autowired
	private CrudReposer reposer;

	public User saveUser(User user) {
		//String randomCode = RandomString.make(64);
		//user.setVerification_code(randomCode);
		return repo.save(user);
	}
	public Admin saveAdmin(Admin admin) {
		//String randomCode = RandomString.make(64);
		//user.setVerification_code(randomCode);
		return repos.save(admin);
	}
	public Services saveSer(Services ser) {
		//String randomCode = RandomString.make(64);
		//user.setVerification_code(randomCode);
		return reposer.save(ser);
	}
	public User fetchUserByPhone(String phoneNo)
	{
		return repo.findByPhoneNo(phoneNo);
	}

	
	public User fetchUserByEmailid(String email) {
		return repo.findByEmailId(email);

	}
	
	public Admin fetchAdminByEmailIdAndPassword(String email, String password) {
		
		return repos.findByEmailIdAndPassword(email, password);
		
	}


	public User fetchUserByEmailIdAndPassword(String email, String password) {
		return repo.findByEmailIdAndPassword(email, password);

	}

	public User upUser(Integer id, String password) {

		
	 Optional<User> db= repo.findById(id); 
	 if(db.isPresent())
	 {
		 User uu = db.get();
		 uu.setPassword(password);
		 
	 }
	
	 User uu1 = db.get();
	 User uu2 = repo.save(uu1);
	 return uu2;
	 
		 
	}
	public void sendVerificationEmail(User user)
			throws UnsupportedEncodingException, MessagingException {
		// TODO Auto-generated method stub
		String subject = "Registration Successful";
		String sendeName = "voiz fonica team";
		String mailContent = "<p>Dear " + user.getFirstName() + ",</p>";
		mailContent += "<p>please click the link below to login:</p>";

		//String verifyURL = /* siteURL /"http://localhost:4401/login" / + "/verify?code=" + user.getVerificationcode() */;
		String loginURL = /* siteURL */"http://localhost:4401/login" /* + "/verify?code=" + user.getVerificationcode() */;
		mailContent += "<h3><a href=\"" + loginURL + "\">LogIn</a></h3>";

		mailContent += "<p>Thank you <br>The voiz fonica team</p>";

		MimeMessage message = mailSender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message);

		helper.setFrom("monishajrk@gmail.com", sendeName);
		helper.setTo(user.getEmailId());
		helper.setSubject(subject);

		helper.setText(mailContent, true);
		mailSender.send(message);

	}
	
	public void sendPaymentEmail(String email)
			throws UnsupportedEncodingException, MessagingException {
		// TODO Auto-generated method stub
		String subject = "Payment Successful";
		String sendeName = "voiz fonica team";
		User uu = fetchUserByEmailid(email);
		String mailContent = "<p>Dear " + uu.getFirstName() + ",</p>";
		mailContent += "<p>Your Payment is Successful</p>";

		//String verifyURL = /* siteURL /"http://localhost:4401/login" / + "/verify?code=" + user.getVerificationcode() */;
		String loginURL = /* siteURL */"http://localhost:4401/login" /* + "/verify?code=" + user.getVerificationcode() */;
//		mailContent += "<h3><a href=\"" + loginURL + "\">LogIn</a></h3>";

		mailContent += "<p>Thank you <br>The voiz fonica team</p>";

		MimeMessage message = mailSender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message);

		helper.setFrom("monishajrk@gmail.com", sendeName);
		helper.setTo(email);
		helper.setSubject(subject);

		helper.setText(mailContent, true);
		mailSender.send(message);

	}
	
	public User upUserProf(Integer id, User user) {

		
		 Optional<User> db= repo.findById(id); 
		 if(db.isPresent())
		 {
			 User uu = db.get();
			 uu.setPassword(user.getPassword());
			 uu.setCity(user.getCity());
			 uu.setEmailId(user.getEmailId());
			 uu.setFirstName(user.getFirstName());
			 uu.setLastName(user.getLastName());
			 uu.setPhoneNo(user.getPhoneNo());
			 uu.setPincode(user.getPincode());
			 
		 }
		
		 User uu3 = db.get();
		 User uu4 = repo.save(uu3);
		 return uu4;
		 
			 
		}
	
	
	public User upUserProfe(String id, String pass) {
		User db=repo.findByEmailId(id);	 
		db.setPassword(pass);
		User rd =repo.save(db);
		return rd;
		}
	
	public Admin upAdminProfe(String id, String pass) {

		Admin db=repos.findByEmailId(id);	 
		db.setPassword(pass);
		Admin rd =repos.save(db);
		return rd;
		}

	public void deleteUserById(Integer id) {

		repo.deleteById(id);
	}

	public List<User> getAllUsers() {
		return repo.findAll();
	}
	
	public List<Services> getAllServices() {
		return reposer.findAll();
	}
//	public List<Services> getAllByEmailId(String em)
//	{
////		List<Services> des = reposer.findAll();
////		List<Services> des1 = null;
////		for(Services sd:des) {
////			if((sd.getEmailId()).equals(em)) {
////				des1.add(sd);
////			}
////		}
////		return des1;
//		long x=reposer.count();
//		while(x!=0)
//		{
//			x--;
//			Services ses=	reposer.findByEmailId(em);
//			List<Services> des = new ArrayList<>();
//			des.add(ses);
//		}
//			
//		
//	}
	public User getUserById(String emailId) {
		return repo.findByEmailId(emailId);
	}
}
